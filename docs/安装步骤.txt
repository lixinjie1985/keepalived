安装

mkdir /usr/local/keepalived-src
wget下载，tar zxvf解压，cd到目录
./configure --prefix=/usr/local/keepalived
make
make install
mkdir /etc/keepalived
cp /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/
vim /etc/keepalived/keepalived.conf
/usr/local/keepalived/sbin/keepalived
ip a

配置（主节点）

global_defs {
	router_id edu-proxy-01  					## 标识本节点的字条串，通常为 hostname
}
## keepalived 会定时执行脚本并对脚本执行的结果进行分析，动态调整 vrrp_instance 的优先级。如果脚本执行结果为 0， 并且 weight 配置的值大于 0， 则优先级相应的增加。 如果脚本执行结果非 0， 并且 weight配置的值小于 0，则优先级相应的减少。其他情况，维持原本配置的优先级，即配置文件中 priority 对应的值。
vrrp_script chk_nginx {
	script "/etc/keepalived/nginx-check.sh"  	## 检测 nginx 状态的脚本路径
	interval 2  								## 检测时间间隔
	weight -20  								## 如果条件成立，权重-20
}
## 定义虚拟路由，VI_1 为虚拟路由的标示符，自己定义名称
vrrp_instance VI_1 {
	state MASTER          			# 主节点为 MASTER，对应的备份节点为 BACKUP
	interface eth0        			# 绑定虚拟 IP 的网络接口，与本机 IP 地址所在的网络接口相同，我的是 eth1
	virtual_router_id 57  			# 虚拟路由的 ID 号， 两个节点设置必须一样，可选IP最后一段使用, 相同的 VRID 为一个组，他将决定多播的 MAC 地址
	mcast_src_ip 192.168.95.57  	# 本机 IP 地址
	priority 100  					# 节点优先级，值范围 0-254，MASTER 要比 BACKUP 高
	advert_int 1  					# 组播信息发送间隔，两个节点设置必须一样，默认 1s
	# 设置验证信息，两个节点必须一致
	authentication {
		auth_type PASS
		auth_pass 0000 				## 真实生产，按需求对应改过来
	}
	## 将 track_script 块加入 instance 配置块
	track_script {
		chk_nginx 					## 执行 Nginx 监控的服务
	}
	## 虚拟 IP 池, 两个节点设置必须一样
	virtual_ipaddress {
		192.168.95.55  				## 虚拟 ip，可以定义多个
	}
}

配置（备节点）

global_defs {
	router_id edu-proxy-02
}
vrrp_script chk_nginx {
	script "/etc/keepalived/nginx-check.sh"
	interval 2
	weight -20
}
vrrp_instance VI_1 {
	state BACKUP
	interface eth0
	virtual_router_id 57
	mcast_src_ip 192.168.95.52
	priority 90
	advert_int 1
	authentication {
		auth_type PASS
		auth_pass 0000
	}
	track_script {
		chk_nginx
	}
	virtual_ipaddress {
		192.168.95.55
	}
}

检测脚本（nginx-check.sh）
vim /etc/keepalived/nginx-check.sh
#!/bin/bash
A=`ps -C nginx --no-header | wc -l`
if [ $A -eq 0 ];then
    /usr/local/nginx/sbin/nginx 			#尝试重新启动nginx
    sleep 2  								#睡眠2秒
    B=`ps -C nginx --no-header | wc -l`
    if [ $B -eq 0 ];then
        killall keepalived 					#启动失败，将keepalived服务杀死。将vip漂移到其它备份节点
    fi
fi
chmod +x /etc/keepalived/nginx-check.sh

以上配置属于抢占式的。先启动主节点，一开始vip绑定到主节点，主节点发生故障自动漂移到备节点，主节点故障恢复启动后，vip又会自动漂回主节点，等于又被主节点抢回来了

配置成非抢占式的，需要修改两个地方
两个节点的state都为BACKUP
两个节点的vrrp_instance块里都添加nopreempt #解决异常恢复后再次抢占的问题
vip绑定到先启动的那个节点
